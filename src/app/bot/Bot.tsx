import { IonBackButton, IonButtons, IonContent, IonFabButton, IonFooter, IonHeader, IonIcon, IonItem, IonItemGroup, IonLabel, IonList, IonMenuButton, IonNote, IonPage, IonSpinner, IonText, IonTextarea, IonTitle, IonToolbar, useIonRouter } from '@ionic/react';
import './Bot.css';
import { checkmarkDoneOutline, send } from 'ionicons/icons';
import { postBot, postBotGo } from '../service/Http-bot';
import { useEffect, useRef, useState } from 'react';
import { useParams } from 'react-router';
import React from 'react';
import { Word, Phrase } from '../model/Phrase';
import { getFramework, getName } from '../service/Http-malware';
import { Malware } from '../model/Malware';
import { Message } from '../model/Message';

const Bot: React.FC = () => {
  const navigation = useIonRouter();

  const { name } = useParams<{ name: string; }>();

  const goHome = () => {
    navigation.push("./home", "forward", "replace");
  };

  const body: any = {id: 1, sender: 1, message: 'What can I do?'};

  const [itens, setItens] = useState<any[]>([]);

  useEffect(() => {
    postBot(body)
    .then((response) => {
                          let msg: string = ""; 
                          if (name=="null") {msg = response.data.message} else {msg = name}; 
                          const message = {
                            id: response.data.id,
                            sender: response.data.sender,
                            message: msg
                          };
                          const newMessage = [
                            {
                              id: message.id,
                              sender: message.sender,
                              message: message.message
                            },
                            ...itens
                          ];
                          setItens(newMessage);
                        })
  }, []);

  function search(obj: any[]) {
    return obj;
  };

  const message: Array<Message> = [];

  const setMessage = (value: any, side: number) => {
    const item: Message = new Message(1, side, value);
    message.push(item);
  };

  const sender = useRef(null);

  const sendMessage = () => {
    message.forEach(index=>{
      const newMessage = {
        id: index.id,
        sender: index.sender,
        message: index.message
      };
      itens.unshift(newMessage);
    })
    const newMessage = [...itens];
    setItens(newMessage);
  };

  const sendGoMessage = (value: any) => {
    const msg = value.current.value;
    message.shift;
    setMessage(msg, 2);
    const body: any = {id: 1, sender: 2, message: msg};
    postBotGo(body)
    .then((response) => {
                          const list: Array<Word> = [];
                          response.data.Word.forEach((index: any) => {
                            const word: Word = new Word(index.Term, index.Class, index.Sentence);
                            list.push(word);
                          });
                          const phrase: Phrase = new Phrase(list, response.data.Kind);
                          if(phrase.kind=="declarativa") {
                            const name = phrase.word.filter(index=>(index.sentence=="predicado") && (index.breed=="substantivo")).map(index2=>index2.term);
                            sendMalware(name);
                          } else {
                            setMessage("don't declarative", 1);
                            sendMessage();
                          }
                        });
  };

  function execute(obj: any[]) {
    return obj.filter(index=>(index.kind=="declarativa"));
  };

  const sendMalware = (value: any) => {
    const name = value[0];
    getName(name)
    .then((response) => {
                          if(response.data.length > 0) { 
                            const list: Array<Malware> = [];
                            response.data.forEach((index: any) => {
                              const malware: Malware = new Malware(index.name, index.description, index.framework); 
                              list.push(malware);
                            });
                            list.forEach(index=>{
                              setMessage(index.description, 1);
                            });
                            sendMessage();
                          } else {
                            sendFramework(name);
                          };
                        })
  };

  const sendFramework = (value: any) => {
    getFramework(value)
    .then((response) => {
                          if(response.data.length > 0) { 
                            const list: Array<Malware> = [];
                            response.data.forEach((index: any) => {
                              const malware: Malware = new Malware(index.name, index.description, index.framework);
                              list.push(malware);
                            });
                            list.forEach(index=>{
                              setMessage(index.name, 1);
                            });
                            sendMessage();
                          } else {
                            setMessage("not found", 1);
                            sendMessage();
                          };
                        })
  };

  return (
    <IonPage>
      <IonHeader>
        <IonToolbar>
          <IonButtons slot="start" onClick={ () => goHome() }>
            <IonBackButton default-href=""></IonBackButton>
          </IonButtons>
          <IonTitle></IonTitle>
        </IonToolbar>
      </IonHeader>
      <IonContent fullscreen>
        <IonList>
            <IonItemGroup>
              {search(itens).map((list, index) => (
                <IonItem lines="none" className={(list.sender==1)? "sender-item" : "user-item"} key={index}>
                  <IonLabel slot={(list.sender==1)? "start" : "end"} className={(list.sender==1)? "sender-label" : "user-label"}>
                    <IonText className={(list.sender==1)? "sender-text" : "user-text"}>{list.message}</IonText>
                    <IonNote className={(list.sender==1)? "sender-note" : "user-note"}>
                      <IonIcon icon={checkmarkDoneOutline} color='#ffffff'></IonIcon>
                    </IonNote>
                  </IonLabel>
                </IonItem>
              ))}
            </IonItemGroup>
        </IonList>
      </IonContent>
      <IonFooter className="footer-bot">
        <IonToolbar className="footer-bot">
          <IonTextarea
            placeholder="Send message"
            className="message-bot"
            name="message"
            ref={sender}>
          </IonTextarea>
          <IonButtons slot="end" className="footer-bot">
            <IonFabButton size="small" className="fab-bot" onClick={ () => sendGoMessage(sender) }>
              <IonIcon icon={send}></IonIcon>
            </IonFabButton>
          </IonButtons>
        </IonToolbar>
      </IonFooter>
    </IonPage>
  );
};

export default Bot;
